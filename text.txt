{\rtf1\ansi\ansicpg1251\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 <?php \
\
//	\uc0\u1057 \u1076 \u1077 \u1083 \u1072 \u1090 \u1100  \u1085 \u1086 \u1088 \u1084 \u1072 \u1083 \u1100 \u1085 \u1091 \u1102  \u1086 \u1073 \u1083 \u1072 \u1089 \u1090 \u1100  \u1074 \u1080 \u1076 \u1080 \u1084 \u1086 \u1089 \u1090 \u1080 ...\

	abstract class regExp \{\
		public $symbolOperators = array(\
			"\\+", "\\+\\+", "-", "--", "\\*", "\\/", "\\%", "\\*\\*",\
			"=", "==", "===", "\\.=", "\\+=", "-", "\\*=", "\\/=", "\\%=", "\\-=",\
			"\\!", "\\&\\&", "\\|\\|",\
			"\\!=", "<>", "\\!==", "<", ">", "<=", ">=",\
			"\\|", "\\^", "\\~", "<<", ">>"\
		);\
	
		public $functOperators = array(\
			"class", "function", "extends", "public", "abstract", "array", "var", "for", "if", "else", "elseif", "else", "return",\
			"preg_match", "preg_match_all", "preg_split", "count", "break", "ereg", "preg_replace", "and", "or", "xor" \
		);\
	\}\
	
	class holsted extends regExp \{\
		var $code,\
			$uniqueOperandsIdent,\
			$allOperandsIdent;\
			"$asb = $cds  + 1;"
			// $as = 1;
		\
		public function getTabulate($arrCode) \{\
			$k = 0;\
			for ($i = 0; $i < count($arrCode); $i++) \{\
				if (ereg("\\\}", $arrCode[$i])) $k--;\
				for ($j = 0; $j < 10; $j++) $arrCode[$i] = "\\t".$arrCode[$i];\
				if (ereg("\\\{", $arrCode[$i])) $k++;\
			\}\
			return $arrCode;\
		\}\
\
		public function checkOperandParrent($arrOperands, $name) \{\
			$result = -1;\
			for ($i = 0; $i < count($arrOperands); $i++) \{\
				if ($arrOperands[$i][0] == $name) \{\
					$result = $i;\
					break;\
				\}\
			\}\
			return $result;\
		\}\
		\
		public function getNameParrent($title, $arrCode, $i) \{\
			$result = "";\
			if (ereg("".$title."", $arrCode[$i])) \{\
				preg_match("/(".$title."[ ][\\w$]+)/", $arrCode[$i], $nameArray);\
				$result = $nameArray[1];\
			\}\
			return $result;\
		\}\
		\
		public function checkIdentName($initArray, $ident) \{\
			$result = false;\
			for ($i = 1; $i < count($initArray); $i++) \
				if ($initArray[$i] == $ident) $result = true;\
			return $result;\
		\}\
		\
		public function addIdentClass_Function(&$arrOperands, $code, $checkLine, &$arrayCounter, &$classCounter) \{\
			if ($checkLine == "class") $classCounter = $arrayCounter;\
			elseif ($checkLine == "function") \{\
				preg_match_all("/([\\$][\\w\\$]+)/", $code, $outOperands);\
				for ($i = -1; $i < count($outOperands[1]); $i++) \
					$arrOperands[$arrayCounter][] = $outOperands[1][$i];\
			\} \
			return $classCounter;\
		\}\
		\
		public function getClass_Function(&$arrayCounter, &$classCounter, &$arrOperands, $code, $parrentElement) \{\
			$arrayCounter = $this->checkOperandParrent($arrOperands, $parrentElement);\
			if ($arrayCounter == -1) $arrayCounter = count($arrOperands);\
			\
			$checkClass = preg_split("/ /", $parrentElement);\
			$classCounter = $this->addIdentClass_Function($arrOperands, $code, $checkClass[0], $arrayCounter, $classCounter);\
			return $parrentElement;\
		\}\
		\
		public function getStringOperands($code) \{\
			return preg_match_all("/\\"\\"/", $code);\
		\}\
		\
		public function getNumbersOperands($code) \{\
			return preg_match_all("/(\\d\{0,\}[.\\d+])/", $code);\
		\}\
		\
		public function getUniqueIdent($code, &$arrOperands, $j, $indexClass, &$globalIdent) \{\
			preg_match_all("/([\\$][\\w\\$]+)/", $code, $out);\
			if (preg_match("/global\\b/", $code) == 1) \
				for ($i = 0; $i < count($out[1]); $i++) \
					$globalIdent[] = $out[1][$i];\
			else \
				for ($i = 0; $i < count($out[1]); $i++) \
					if (\
						!$this->checkIdentName($globalIdent, $out[1][$i]) && \
						!$this->checkIdentName($arrOperands[$indexClass], $out[1][$i]) && \
						!$this->checkIdentName($arrOperands[$j], $out[1][$i])\
					)	\
						if ($out[1][$i] != "\\$this") $arrOperands[$j][] = $out[1][$i];\
			return count($out);\
		\}\
		\
		public function getUniqueOperands($code) \{\
			$arrCode = preg_split("/(\\n)/", $code);\
			$indexClass = $arrayCounter = $counterTab = 0;\
			$arrOperands = array();\
			$arrOperands[][] = "";\
			$globalIdent = array();\
			for ($i = 0; $i < count($arrCode); $i++) \{\
				if (ereg("\\\}", $arrCode[$i])) $counterTab--; \
				if (ereg("\\\{", $arrCode[$i])) $counterTab++;\
				if ($counterTab == 0) $arrayCounter = $indexClass = 0;\
				$parrentElement = $this->getNameParrent("(class|function)", $arrCode, $i);\
				if ($parrentElement != "") \{\
					$arrOperands[$arrayCounter][0] = $this->getClass_Function($arrayCounter, $indexClass, $arrOperands, $arrCode[$i], $parrentElement);\
					$globalIdent[0] = $globalIdent = array(); \
				\} elseif (ereg("([\\$])", $arrCode[$i])) \
					$this->getUniqueIdent($arrCode[$i], $arrOperands, $arrayCounter, $indexClass, $globalIdent);\
			\}\
			return $arrOperands;\
		\}\
		\
		public function getUniqueOperandsCount($code) \{\
			 return count($this->getUniqueOperands($code)) + $this->getNumbersOperands($code) + $this->getStringOperands($code);\
		\}\
		\
		public function getAllOperands($arrCode) \{\
			preg_match_all("/[\\$]\\w+/", $arrCode, $allOperands);\
			return count($allOperands[0]) + $this->getNumbersOperands($this->code) + $this->getStringOperands($this->code);\
		\}\
		\
		public function getAllOperatorsFunct($code) \{\
			$count = 0;\
			for ($i = 0; $i < count($this->functOperators); $i++) \
				$count += preg_match_all("/[^\\$]\\b".$this->functOperators[$i]."\\b/", $code);\
			return $count;\
		\}\
		\
		public function getAllOperatorsSymb($code) \{\
			$count = 0;\
			for ($i = 0; $i < count($this->symbolOperators); $i++) \
				$count += preg_match_all("/[^[\\$\\-\\+\\*<>\\/=\\|\\&!\\.]".$this->symbolOperators[$i]."[^[=\\+\\-\\*>]/", $code);\
			return $count;\
		\}\
		\
		public function getAllOperators($code) \{\
			return $this->getAllOperatorsFunct($code) + $this->getAllOperatorsSymb($code); \
		\}\
		\
		public function getUniqueOperatorsFunct($code) \{\
			$count = 0;\
			for ($i = 0; $i < count($this->functOperators); $i++) \
				if (ereg("[^\\w]".$this->functOperators[$i]."[^\\w]", $code)) \
					$count++;\
			return $count;\
		\}\
		\
		public function getUniqueOperatorsSymb($code) \{\
			$count = 0;\
			for ($i = 0; $i < count($this->symbolOperators); $i++) \
				if (ereg("[^\\$\\-\\+\\*<>\\/=\\|\\&!\\.]".$this->symbolOperators[$i]."[^=\\+\\-\\*>]", $code)) \
					$count++;\
			return $count;\
		\}\
		\
		public function getUniqueOperators($code) \{\
			return $this->getUniqueOperatorsFunct($code) + $this->getUniqueOperatorsSymb($code); \
		\}\
		\
		public function getValue($code) \{\
			$code = preg_replace("/[\\t]\{1,\}/", "", $code);\
			$code = preg_replace("/\\".+?\\"[\\),\\n]/", "\\"\\"", $code);\
			$arrCode = preg_split("/(\\n)/", $code);\
			return 1;\
		\}\
		\
		public function editCodeForPrint($code) \{\
			$code = preg_replace("/[\\t]\{1,\}/", "", $code);\
			$code = preg_replace("/\\".+?\\"[\\),\\n]/", "\\"\\"", $code);\
			$arrCode = preg_split("/(\\n)/", $code);\
			return $code;\
		\}\
		\
		public function setCode ($code) \{\
			$code = $this->editCodeForPrint($code);\
			$this->getValue($code);\
			return $code;\
		\}\
	\}\
?>}