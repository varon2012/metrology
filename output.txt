<?php 				class Holsted { 			var $code;			private $symbolOperators = array(				 ,  ,  ,  ,  ,				 ,  ,  ,  , 				 ,  ,  ,  ,  ,  ,  ,  ,  ,  ,				 ,  ,  ,  ,				 ,  ,  ,  ,  ,  ,  ,  ,  ,  , 				 ,  ,  ,  ,  ,  ,  ,  ,  			);			private $wordOperators = array(				 ,  ,  ,  ,				 ,  ,  ,  ,				 ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , 				 ,  ,  ,  , 				 ,  ,  ,  ,  ,  ,  ,  ,							 ,  ,  ,  ,  ,  ,  ,  , 				 ,  ,  ,  ,  ,  ,  ,  ,				 ,  ,  ,  ,  ,  ,  , 				 ,				 ,  ,  ,  ,  ,  ,  , 				 ,  ,  ,  ,  ,  ,  ,  ,				 ,  ,  ,  ,  ,  ,				 ,  ,  , 				 ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,				 ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , 				 ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,				 ,  ,  ,				 ,  ,  ,  ,  ,  , 				 ,  ,  ,  ,  ,  ,  ,  ,  , 				 ,  ,				 ,  ,  ,  ,  ,  ,  ,  ,  ,  ,				 ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , 				 ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , 				 ,  ,				 ,  ,  ,  ,  ,  ,  ,  ,  ,  , 				 ,  ,  , 				 ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , 				 			);			private $quoteOperators = array(				 ,  ,  ,  ,  ,  			);						public function getCode() { 				return $this->code; 			}			public function setCode($code) {				$this->code = $code;			}															private function printArray($arrayOptions, $index, $count, $str) {				for ($i = 0; $i < $count; $i++) {					echo $arrayOptions[$index][$i].$str. ;				}			}						private function printArrayForeach($arrayOptions) {				foreach ($arrayOptions as $key => $value) {					echo $key. .$value. ;				}			}						public function getUniqueOperators() {				$countOperators = 0;				for ($i = 0; $i < count($this->symbolOperators); $i++) {					if (ereg( .$this->symbolOperators[$i]. , $this->code)) $countOperators++;				}				for ($i = 0; $i < count($this->quoteOperators); $i++) {					if (ereg( .$this->quoteOperators[$i]. , $this->code)) $countOperators++;				}				for ($i = 0; $i < count($this->wordOperators); $i++) {					if (ereg( .$this->wordOperators[$i]. , $this->code)) $countOperators++;				}				preg_match_all( , $this->code, $arrayFunction);				$countOperators += count($arrayFunction[1]); 				return $countOperators;			}						public function getSymbolsCount($code, $checkPrint) {				$countSymbols = 0;				for ($i = 0; $i < count($this->symbolOperators); $i++) {					if (ereg( .$this->symbolOperators[$i]. , $code)) {						preg_match_all( .$this->symbolOperators[$i]. , $code, $arraySymbols);						$countSymbols += count($arraySymbols[0]);						if ($checkPrint && $arraySymbols[0]) $this->printArray($arraySymbols, 1, 1,  .count($arraySymbols[0]). );					}				}				return $countSymbols;			}						public function getQuoteCount($code, $checkPrint) {				$countQuote = 0;				for ($i = 0; $i < count($this->quoteOperators); $i++) {					if (ereg( .$this->quoteOperators[$i]. , $code)) {						preg_match_all( .$this->quoteOperators[$i]. , $code, $arrayQuote);						$countQuote += count($arrayQuote[0]);						if ($checkPrint && $arrayQuote[0]) $this->printArray($arrayQuote, 1, 1,  .count($arrayQuote[0]). );					}				}				return $countQuote;			}						public function getReservedWordCount($code, $checkPrint) {				$countResWord = 0;				for ($i = 0; $i < count($this->wordOperators); $i++) {					if (ereg( .$this->wordOperators[$i]. , $code)) {						preg_match_all( .$this->wordOperators[$i]. , $code, $arrayStr);						$countResWord += count($arrayStr[0]);						if ($checkPrint && $arrayStr[0]) $this->printArray($arrayStr, 1, 1,  .count($arrayStr[0]). );					}				}				return $countResWord;			}			public function getNamedFunction($code, $checkPrint) {				preg_match_all( , $code, $arrayStr);				$count = 0;				for ($i = 0; $i < count($arrayStr[1]); $i++) {					preg_match_all( .$arrayStr[1][$i]. , $code, $arrayResultSearch);					$count += count($arrayResultSearch[0]);					if ($checkPrint && $arrayResultSearch[0]) $this->printArray($arrayResultSearch, 0, 1,  .count($arrayResultSearch[0]). );				}				return $count;			}			public function getAllOperatorsCount() {				$editCode = preg_replace('/ |				$countOperators = 	$this->getSymbolsCount($editCode, false) + $this->getQuoteCount($editCode, false) + 									$this->getReservedWordCount($editCode, false) + $this->getNamedFunction($editCode, false); 				return $countOperators;			}			public function getAllOperandsArray($checkPrint) {				$editCode = preg_replace('/				preg_match_all( ](\w+.){1,}['\ , $editCode, $arrayOperands[1]);				preg_match_all('/(\$|%|@)\w+/', $editCode, $arrayOperands[0]);				$editCode = preg_replace('/ |\/\/.+/',  ,$editCode);				preg_match_all( , $editCode, $arrayOperands[2]);				$arrayVar = array_count_values($arrayOperands[0][0]);				$arrayDigits = array_count_values($arrayOperands[2][0]);				$arrayString = array_count_values($arrayOperands[1][1]);				if ($checkPrint) {					if ($arrayString) {						echo  ;						$this->printArrayForeach($arrayString);					}					if ($arrayDigits) {						echo  ;						$this->printArrayForeach($arrayDigits);					}					if ($arrayVar) {						echo  ;						$this->printArrayForeach($arrayVar);					}				}				return $arrayOperands;			}			public function getAllOperandsCount() {				$arrayOperands = $this->getAllOperandsArray(false);				return count($arrayOperands[0][0]) + count($arrayOperands[1][0]) + count($arrayOperands[2][0]);			}			private function getCountUniqueVar($arrayVar, $checkPrint) {				$count = 0;				if ($checkPrint) echo  ;				for ($i = 0; $i < count($arrayVar[0]); $i++) {					if (ereg( , $arrayVar[0][$i])) {						$lineVar = preg_replace('/=[^>].+/',  , $arrayVar[0][$i]);						preg_match_all('/(\$|%|@)\w+/', $lineVar, $arraySingleVar);					} else preg_match_all('/(\$|%|@)\w+/', $arrayVar[0][$i], $arraySingleVar);					if ($checkPrint) $this->printArray($arraySingleVar, 0, count($arraySingleVar[0]),  );					$count += count($arraySingleVar[0]);				}				return $count;			}			public function getUniqueOperands($checkPrint) {				$editCode = preg_replace('/ |\/\/.+|				$arrayUniqueOperands = $this->getAllOperandsArray(false);				preg_match_all('/[^[a-zA-Z\$\%\@]my[\( ].+[;\{\) ]/', $editCode, $arrayVar);				$arrayUniqueVar = $this->getCountUniqueVar($arrayVar, $checkPrint);				$arrayUniqueDigits = array_count_values($arrayUniqueOperands[2][0]);				$arrayUniqueString = array_count_values($arrayUniqueOperands[1][0]);				if ($checkPrint) {					if ($arrayUniqueString) {						echo  ;						$this->printArrayForeach($arrayUniqueString);					}					if ($arrayUniqueDigits) {						echo  ;						$this->printArrayForeach($arrayUniqueDigits);					}				}				return count($arrayUniqueVar) + count($arrayUniqueDigits) + count($arrayUniqueString);			}				public function getSize() {				return $this->getUniqueOperands(false) + $this->getUniqueOperators();			}			public function getValue() {				return $this->getAllOperandsCount() + $this->getAllOperatorsCount();			}			public function getActualVolume() {				$actualVolume = $this->getValue() * log($this->getSize(), 2);				return $actualVolume;			}															private function getLexicon () {				preg_match_all('/[^\w\$%@]sub/', $this->code, $arrayPrototype);				$count = count($arrayPrototype[0]);				$countVar = 0;				preg_match_all( , $this->code, $arrayVar);				for ($i = 1; $i < count($arrayVar); $i++) {					for ($j = 0; $j < count($arrayVar[$i]); $j++) {						preg_match_all('/[\$%@](\w+)[^;]/', $arrayVar[$i][$j], $resultVar);						$count += count($resultVar[0]);						$countVar += count($resultVar[0]);					}				}				$count += $countVar + 1;				return $count;			}			public function getPotentialVolume () {				$lexicon = $this->getLexicon();				return $lexicon * log($lexicon, 2);			}														public function getAllExpression() {				return $this->getAllOperandsCount() + $this->getAllOperatorsCount();			}					public function getUniqueExpression() {				return $this->getUniqueOperands(false) + $this->getUniqueOperators();			}						public function corectProgram() {				if ($this->getActualVolume()) return $this->getPotentialVolume() / $this->getActualVolume();				else return 0;			}			public function getProgramLevel() {				if ($this->getAllOperandsCount() * $this->getUniqueOperators())					return (2 * $this->getUniqueOperands(false)) / ($this->getAllOperandsCount() * $this->getUniqueOperators());				else return 0;			}			public function intAlg() {				return $this->getProgramLevel() * $this->getActualVolume();			}			public function getTheoreticalLength() {				$operators = $this->getUniqueOperators();				$operands = $this->getUniqueOperands(false);				return $operators*log($operators, 2) + $operands*log($operands, 2);			}			public function getIntEffort() {				if ($this->getProgramLevel())					return $this->getTheoreticalLength() * log(($this->getUniqueExpression() / $this->getProgramLevel()),2);				else return 0;			}			public function getRealLength() {				if ($this->getProgramLevel())					return $this->getAllExpression() * log(($this->getUniqueExpression() / $this->getProgramLevel()),2);				else return 0;			}			public function getLast() {				return $this->getActualVolume() * $this->getActualVolume() / $this->getPotentialVolume();			}		} 		$code = new Holsted;		$file = fopen( ,  );		if ($file) while (!feof($file)) $text = $text.fread($file, 999);		fclose($file);		$text = preg_replace('/		$text = preg_replace('/\n{1,}/',  , $text);		$code->setCode($text);	?>	<div style= >		<pre><?php			print $code->code;			?>		</pre>	</div>	<div style= >		<div>			<pre><?php					echo  .$code->getUniqueExpression(). ;					echo  .$code->getUniqueOperands(false). ;					echo  .$code->getUniqueOperators(). ;					echo  .$code->getAllExpression(). ;					echo  .$code->getAllOperandsCount(). ;					echo  .$code->getAllOperatorsCount(). ;					echo  .$code->getActualVolume(). ;					echo  .$code->getPotentialVolume(). ;					echo  .$code->corectProgram(). ;					echo  .$code->getProgramLevel(). ;					echo  .$code->intAlg(). ;					echo  .$code->getTheoreticalLength(). ;					echo  .$code->getIntEffort(). ;					echo  .$code->getRealLength(). ;										echo  ;					echo  ;					$code->getSymbolsCount($code->code, true);					$code->getQuoteCount($code->code, true);					echo  ;					$code->getReservedWordCount($code->code, true);					echo  ;					$code->getNamedFunction($code->code, true